"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Agregado para variables de entorno
from dotenv import load_dotenv  # Añadido para cargar variables de entorno

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Cargar variables de entorno desde .env en BASE_DIR
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-q+0lgi)&jl2ro0dxcl5qar%)yoz2nid1^)gk&$ulj#dul%-v4#')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')

# Root URL Configuration
ROOT_URLCONF = 'backend.urls'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Requerido por allauth
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'channels',  # Para WebSockets
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_filters',  # Add this line    # Local apps
    'accounts',
    'authentication',  # Agregar la app de autenticación
    'products',
    'chat',
    'notifications',
]

INSTALLED_APPS += [
    'anymail',  # Para SendGrid
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Para servir archivos estáticos en producción
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required by allauth
    'products.middleware.ProductReviewMiddleware',   # Middleware para revisar productos pendientes
]

# Templates configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-cl'

TIME_ZONE = 'America/Santiago'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Authentication settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Django AllAuth settings
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Cambiar de 'mandatory' a 'optional'
ACCOUNT_UNIQUE_EMAIL = True

# Django Sites Framework
SITE_ID = 1

# Validador personalizado para dominio de correo
ACCOUNT_EMAIL_DOMAIN_WHITELIST = ['uoh.cl']

# Configuración para Django Channels (chat)
ASGI_APPLICATION = 'backend.asgi.application'  # Fix the ASGI application path
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',  # Para desarrollo
        # Para producción usar Redis
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {
        #     "hosts": [('127.0.0.1', 6379)],
        # },
    },
}

# Configuración de CORS
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Solo en desarrollo
CORS_ALLOW_CREDENTIALS = True

# URLs permitidas para CORS
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 
    'http://localhost:5173,http://localhost:3000,http://127.0.0.1:5173,http://127.0.0.1:3000'
).split(',') if not DEBUG else [
    "http://localhost:5173",  # URL del frontend (Vite)
    "http://localhost:3000",  # URL alternativa del frontend
    "http://127.0.0.1:5173",  # URL del frontend usando 127.0.0.1
    "http://127.0.0.1:3000",  # URL alternativa usando 127.0.0.1
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF Settings for production
CSRF_TRUSTED_ORIGINS = [
    'https://uoh-market-project-production-e906.up.railway.app',
    'https://uoh-market.vercel.app',
    'http://localhost:5173',
    'http://localhost:3000',
]

# Add your Railway domain to allowed hosts
if not DEBUG:
    ALLOWED_HOSTS = ['uoh-market-project-production-e906.up.railway.app', '*']

# Configuraciones para email
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')

if EMAIL_HOST_USER and EMAIL_HOST_PASSWORD:
    # Usar configuración SMTP personalizada (Gmail, Mailtrap, etc.)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = EMAIL_HOST or 'smtp.gmail.com'  # Default a Gmail
    EMAIL_PORT = int(EMAIL_PORT) if EMAIL_PORT else 587  # Default port
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = EMAIL_HOST_USER
    EMAIL_HOST_PASSWORD = EMAIL_HOST_PASSWORD
    print(f"Configurando SMTP: {EMAIL_HOST_USER} via {EMAIL_HOST}:{EMAIL_PORT}")
elif SENDGRID_API_KEY:
    # Usar SendGrid si la API key está disponible
    EMAIL_BACKEND = 'anymail.backends.sendgrid.EmailBackend'
    ANYMAIL = {
        'SENDGRID_API_KEY': SENDGRID_API_KEY,
    }
    print("Configurando SendGrid")
else:
    # Usar console backend para desarrollo si no hay configuración
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("Usando console backend para emails")

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@uohmarket.com')

# Add these settings to your settings.py

# Frontend URL for building confirmation links  
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:5173')

# Config para Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Changed this to allow unauthenticated access
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 12
}

# Static files settings
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Asegurar que los directorios existan
import os
os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(STATIC_ROOT, exist_ok=True)

# En desarrollo, configurar STATICFILES_DIRS si existe el directorio
if DEBUG:
    STATICFILES_DIRS = [BASE_DIR / 'static'] if (BASE_DIR / 'static').exists() else []

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql' if os.getenv('DATABASE_URL') else 'django.db.backends.sqlite3',
        'NAME': os.getenv('DATABASE_URL') or BASE_DIR / 'db.sqlite3',
    }
}

# Si hay DATABASE_URL, usar configuración PostgreSQL de Railway
if os.getenv('DATABASE_URL'):
    import dj_database_url
    DATABASES['default'] = dj_database_url.parse(os.getenv('DATABASE_URL'))

# Configuración de autenticación
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Base URL para generar URLs absolutas cuando no hay contexto de request
# Configuración de URL base para construcción de URLs absolutas
BASE_URL = os.getenv('BASE_URL', 'http://localhost:8000')

# Asegurar HTTPS en producción (Railway)
if 'railway.app' in BASE_URL and BASE_URL.startswith('http://'):
    BASE_URL = BASE_URL.replace('http://', 'https://')

# Frontend URL for building confirmation links
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:5173')

# Configuración para moderación de imágenes - IA AVANZADA + DETECTOR DE DROGAS
CONTENT_MODERATION_THRESHOLD = 0.3  # Umbral muy estricto para drogas (era 0.5)
CONTENT_MODERATION_ENABLED = True   # Habilitar/deshabilitar moderación por IA
CONTENT_MODERATION_FALLBACK = False  # NO usar método local - Solo IA avanzada
MODERATION_SERVICE = 'enhanced_drug_detection'  # IA avanzada + detector específico de drogas

# Configuraciones legacy (comentadas)
# HUGGINGFACE_API_TOKEN = os.getenv('HUGGINGFACE_API_TOKEN', '')  # Solo si quieres usar Hugging Face
# DEEPAI_API_KEY = os.getenv('DEEPAI_API_KEY', '')  # Solo si quieres usar DeepAI

# Configuración de Google OAuth
GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID', '806140741515-b6u96b645s99tpv7ua14q2gpq16cdmb6.apps.googleusercontent.com')
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET', '')  # Obtener desde variable de entorno
